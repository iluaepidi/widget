{
  "name": "gpii-binder",
  "version": "0.0.1",
  "private": true,
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GPII/gpii-binder.git"
  },
  "scripts": {
    "postinstall": "bower install",
    "test": "node tests/all-tests.js"
  },
  "devDependencies": {
    "node-jqunit": "~1.1.3",
    "gpii-express": "git://github.com/the-t-in-rtf/gpii-express.git#4d0314d123ccc543da41a4cd1fc5471d4260e24a",
    "gpii-test-browser": "git://github.com/the-t-in-rtf/gpii-test-browser.git#04a45c1683e69ae9453f55b049c96b90cac32c39",
    "grunt": "~0.4.4",
    "grunt-shell": "0.6.4",
    "grunt-contrib-jshint": "~0.9.0",
    "grunt-jsonlint": "1.0.4",
    "infusion": "2.0.0-dev.20151211T025229Z.eabb4fc"
  },
  "gitHead": "c83ff8cde8ba37c72f7e26bebf81c44d1a681c36",
  "readme": "# `gpii-binder`\n\nThis package provides a mechanism for \"binding\" [Fluid view component](http://docs.fluidproject.org/infusion/development/tutorial-gettingStartedWithInfusion/ViewComponents.html) model variables to DOM elements using [selectors](http://docs.fluidproject.org/infusion/development/tutorial-gettingStartedWithInfusion/ViewComponents.html#selectors).\n\nYou can bind to any DOM element whose value can be read and set using\n[`fluid.value`](http://docs.fluidproject.org/infusion/development/ViewAPI.html#fluid-value-nodein-newvalue-), but the\nprimary (and tested use case is in working with form elements, specifically:\n\n* text `<input>` fields\n* radio `<input>` fields\n* checkbox `<input>` fields\n* `<textarea>` fields\n* `<select>` fields\n\nOnce you run `gpii.binder.applyBinding(component)` (see \"Static Functions\" below), a \"binding\" is created\nbetween any selectors and model variables referenced in`options.binding` (see \"Supported options\" for the format).\n\nOnce a binding exists, changes to a bound model sent using [the change applier](http://docs.fluidproject.org/infusion/development/ChangeApplier.html)\nare used to update the DOM element's value.\n\nThe binding is bidirectional.  Change events to a bound DOM element's value are also relayed to the associated model\nvariable.  Note that change events are not generated when you directly set the element's value, but only when you have\nupdated the value using browser events *and* change focus.  For more details, see the\n[jQuery documentation for the change event](https://api.jquery.com/change/).\n\n\n# Supported options\n\nThe `gpii.binder.applyBinding` function provided by this package can only do its work if you have the\nfollowing options defined:\n\n| Option             | Type     | Description |\n| ------------------ | -------- | ----------- |\n| `selectors` | `{Object}` | You must define one or more [selectors](http://docs.fluidproject.org/infusion/development/tutorial-gettingStartedWithInfusion/ViewComponents.html#selectors) that can be used in a binding. |\n| `bindings` | `{Object}` | Defines the relationship between selectors and model variables.  The full notation for this option is outlined below. |\n\n## Long notation\n\nThere are two ways of specifying bindings.  The \"long form\" has named keys (as in the first example above) and\nsupports the following options:\n\n* selector: A valid selector for your component.  Must be able to be resolved using `that.locate(selector)`\n* path: A valid path for the model variable whose value will be watched.  Must be able to be resolved using `fluid.get(path)`.\n\nThe \"long form\" looks like:\n\n    bindings: {\n        \"key\": {\n            selector: \"selector1\",\n            path:     \"path1\"\n        }\n    }\n\n\n## Short notation\n\nThe \"short form\" uses the selector as the key, and the path as a string value (as in the second example above).\n\n    bindings: {\n        \"selector2\": \"path2\"\n    }\n\n\n## Combining the two notations\n\nYou can use both forms together, as in:\n\n    bindings: {\n        \"key\": {\n            selector: \"selector1\",\n            path:     \"path1\"\n        },\n        \"selector2\": \"path2\"\n    }\n\n\n\n# Static Functions\n\n## `gpii.binder.applyBinding(component)`\n* `component` `{Object}` - A fluid `viewComponent` with both `selectors` and `bindings` options defined (see above).\n* Returns: Nothing.\n\nYou must explicitly invoke this function to create bindings.  Generally you wil do this from a\n[listener definition](http://docs.fluidproject.org/infusion/development/InfusionEventSystem.html#registering-a-listener-to-an-event).\nFor example, if all required markup already exists on startup, you can simply bind to the \"onCreate\" event, as in:\n\n    listeners: {\n        \"onCreate.applyBindings\": {\n            \"funcName\": \"gpii.binder.applyBinding\",\n            \"args\":     \"{that}\"\n        }\n    }\n\nFor an example of using the binder with static markup, see the tests in this package.\n\n### Bindings and dynamic markup\n\nIf your component generates or regenerates markup, you will need to call `gpii.binder.applyBinding(component)`\nwhenever it changes.  Best practice is to call `fluid.initDomBinder` when you have finished manipulating the DOM and\nthen listen for the `viewComponent`'s `onDomBind` event, as in:\n\n    listeners: {\n        \"onCreate.applyBindings\": {\n            \"funcName\": \"gpii.binder.applyBinding\",\n            \"args\":     \"{that}\"\n        }\n    }\n\nSee the `templateAware` grade in [the `gpii-handlebars` package](https://github.com/GPII/gpii-handlebars) for a working\nexample of dynamically updating bindings.",
  "readmeFilename": "README.md",
  "description": "This package provides a mechanism for \"binding\" [Fluid view component](http://docs.fluidproject.org/infusion/development/tutorial-gettingStartedWithInfusion/ViewComponents.html) model variables to DOM elements using [selectors](http://docs.fluidproject.org/infusion/development/tutorial-gettingStartedWithInfusion/ViewComponents.html#selectors).",
  "bugs": {
    "url": "https://github.com/GPII/gpii-binder/issues"
  },
  "homepage": "https://github.com/GPII/gpii-binder#readme",
  "_id": "gpii-binder@0.0.1",
  "_shasum": "2bde39ff14f02a574b167320f8e7c6742c94098a",
  "_from": "git://github.com/the-t-in-rtf/gpii-binder.git#c83ff8cde8ba37c72f7e26bebf81c44d1a681c36",
  "_resolved": "git://github.com/the-t-in-rtf/gpii-binder.git#c83ff8cde8ba37c72f7e26bebf81c44d1a681c36"
}
